name: Release package
on:
  workflow_dispatch:
    inputs:
      release-type:
        description: "Release type (one of): patch, minor, major, prepatch, preminor, premajor, prerelease"
        required: true

jobs:
  tauri:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest] #, ubuntu-20.04, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev librsvg2-dev at-spi2-core xvfb

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Sync node version and setup cache
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
          cache: "pnpm"

      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile

      - name: Build the app
        run: pnpm tauri build

      # - name: Build the app
      #   uses: tauri-apps/tauri-action@v0

      - name: Build the app
        run: pnpm tauri-postbuild

      - name: Test
        if: matrix.platform != 'ubuntu-20.04'
        run: pnpm test

      - name: Test
        if: matrix.platform == 'ubuntu-20.04'
        run: xvfb-run pnpm test

      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: image-tmp
          path: test/tmp/*

      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: image-diff
          path: test/diff/*

      - uses: actions/upload-artifact@v3
        with:
          name: "bins"
          path: "bins/"
          if-no-files-found: error

  release:
    runs-on: ubuntu-latest
    needs: [tauri]

    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: bins
          path: bins

      - name: Sync node version and setup cache
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
          cache: "pnpm"

      # Configure Git
      - name: Git configuration
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions@users.noreply.github.com"

      # Bump package version
      # Use tag latest
      - name: Bump release version
        if: startsWith(github.event.inputs.release-type, 'pre') != true
        run: |
          echo "NEW_VERSION=$(npm --no-git-tag-version version $RELEASE_TYPE)" >> $GITHUB_ENV
          echo "RELEASE_TAG=latest" >> $GITHUB_ENV
        env:
          RELEASE_TYPE: ${{ github.event.inputs.release-type }}

      # Bump package pre-release version
      # Use tag beta for pre-release versions
      - name: Bump pre-release version
        if: startsWith(github.event.inputs.release-type, 'pre')
        run: |
          echo "NEW_VERSION=$(npm --no-git-tag-version --preid=beta version $RELEASE_TYPE)" >> $GITHUB_ENV
          echo "RELEASE_TAG=beta" >> $GITHUB_ENV
        env:
          RELEASE_TYPE: ${{ github.event.inputs.release-type }}

      # Commit changes
      - name: Commit package.json changes and create tag
        run: |
          git add "package.json"
          git commit -m "chore: release ${{ env.NEW_VERSION }}"
          git tag ${{ env.NEW_VERSION }}

      # Publish version to public repository
      - name: Publish
        run: npm publish --verbose --access public --tag ${{ env.RELEASE_TAG }}
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Push repository changes
      - name: Push changes to repository
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push origin && git push --tags
