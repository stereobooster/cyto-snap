name: "build-on-push"
on: [push]

jobs:
  test-tauri:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest] #, ubuntu-20.04, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        # You can remove libayatana-appindicator3-dev if you don't use the system tray feature.
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Sync node version and setup cache
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
          cache: "pnpm"

      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile

      - name: Build the app
        run: pnpm tauri build

      # - name: Build the app
      #   uses: tauri-apps/tauri-action@v0

      - name: Test
        run: pnpm test

      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: image-diff
          path: test/diff/*

      - name: Set env variables (PACKAGE_VERSION, PACKAGE_NAME, SHA_SHORT)
        run: |
          echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
          echo "PACKAGE_NAME=$(node -p "require('./package.json').name")" >> $GITHUB_ENV
          echo "SHA_SHORT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Set env variables (RUST_TARGET)
        if: matrix.platform == 'macos-latest'
        run: echo "RUST_TARGET=x86_64-apple-darwin" >> $GITHUB_ENV

      - name: Set env variables (RUST_TARGET)
        if: matrix.platform == 'ubuntu-20.04'
        run: echo "RUST_TARGET=x86_64-unknown-linux-musl" >> $GITHUB_ENV

      - name: Set env variables (RUST_TARGET)
        if: matrix.platform == 'windows-latest'
        run: echo "RUST_TARGET=x86_64-pc-windows-msvc" >> $GITHUB_ENV

      - name: Set env variables (BIN_NAME)
        run: echo "BIN_NAME=${PACKAGE_NAME}-${PACKAGE_VERSION}-${SHA_SHORT}-${RUST_TARGET}" >> $GITHUB_ENV

      - name: Pack executable
        run: |
          mkdir -p bins/${BIN_NAME}
          cp src-tauri/target/release/${PACKAGE_NAME}* bins/${BIN_NAME}
          tar -C bins -czvf ${BIN_NAME}.tar.gz ${BIN_NAME}

      - uses: actions/upload-artifact@v3
        with:
          name: "${{ env.BIN_NAME }}"
          path: "${{ env.BIN_NAME }}.tar.gz"
          if-no-files-found: error
